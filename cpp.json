{
	"Sieve of Erathostenes": {
		"prefix": "sieve",
		"body": [
			"const int MAXN = 1e6;",
			"int pf[MAXN+1]; // pf[x] = lowest prime factor of x",
			"void sieve(){ // x is prime if pf[x] = x",
			"    for(int i=2;i<=MAXN;i++){",
			"        if(pf[i]) continue;",
			"        pf[i] = i;",
			"        for(int j=i;j<=MAXN;j+=i) if(!pf[j]) pf[j] = i;",
			"    }",
			"}",
			"vector<int> fact(int x){",
			"    vector<int> ans;",
			"    while(pf[x]){",
			"        ans.push_back(pf[x]);",
			"        x /= pf[x];",
			"    }",
			"    return ans;",
			"}"
		],
		"description": "Sieve of Erathostenes"
	},
	"Segment tree": {
		"prefix": "segtree",
		"body": [
			"struct Tree {",
			"    typedef int T;",
			"    static constexpr T unit = INT_MIN;",
			"    T f(T a, T b) { return max(a, b); } // (any associative fn)",
			"    vector<T> s; int n;",
			"    Tree(int n = 0, T def = unit) : s(2*n, def), n(n) {}",
			"    void update(int pos, T val) {",
			"       for (s[pos += n] = val; pos /= 2;)",
			"            s[pos] = f(s[pos * 2], s[pos * 2 + 1]);",
			"    }",
			"    T query(int b, int e) { // query [b, e]",
			"        e += 1;",
			"        T ra = unit, rb = unit;",
			"        for (b += n, e += n; b < e; b /= 2, e /= 2) {",
			"            if (b % 2) ra = f(ra, s[b++]);",
			"            if (e % 2) rb = f(s[--e], rb);",
			"        }",
			"        return f(ra, rb);",
			"    }",
			"};"
		],
		"description": "segtree"
	},
	"Template Codeforces": {
		"prefix": "tcf",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"typedef long long ll;",
			"typedef pair<ll,ll> pii;",
			"",
			"void solve_tc(){",
			"",
			"    $1",
			"",
			"}",
			"",
			"int main(){",
			"",
			"    cin.tie(0)->sync_with_stdio(0);",
			"    ",
			"    int tc;",
			"    cin >> tc;",
			"",
			"    while(tc--) solve_tc();",
			"    ",
			"    return 0;",
			"}",
		],
		"description": "base code"
	},
	"Template Atcoder": {
		"prefix": "tat",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"typedef long long ll;",
			"typedef pair<ll,ll> pii;",
			"",
			"int main(){",
			"",
			"    cin.tie(0)->sync_with_stdio(0);",
			"    ",
			"    $1",
			"    ",
			"    return 0;",
			"}",
		],
		"description": "base code"
	},
	"Dijkstra": {
		"prefix": "dijkstra",
		"body": [
			"typedef vector<pii> vpii;",
			"typedef pair<ll,ll> pii;",
			"// parameters: ",
			"//   - ll n --> number of vertices",
			"//   - vector<pii> g[n+1] --> adjacency graph --> g[u] stores a pair {v, w}",
			"//   - ll m --> number of start vertices",
			"//   - ll s[m] --> start vertices",
			"//   - ll dis[n+1] --> distances from starting vertices to others",
			"void dijkstra(ll n, vpii* g, ll m, ll* s, ll* dis){",
			"    fill(dis, dis+(n+1), LLONG_MAX);",
			"    set<pii> q;",
			"    for(ll i=0;i<m;i++) dis[s[i]] = 0, q.insert({0, s[i]});",
			"    while(!q.empty()){",
			"        auto& [d, v] = *q.begin();",
			"        for(auto& [u, w]: g[v]){",
			"            if(d + w >= dis[u]) continue;",
			"            q.erase({dis[u], u});",
			"            dis[u] = d + w;",
			"            q.insert({dis[u], u});",
			"        }",
			"        q.erase(q.begin());",
			"    }",
			"}"
		],
		"description": "dijkstra blackbox"
	},
	"LCA Struct": {
		"prefix": "lca",
		"body": [
			"typedef vector<int> vi;",
			"const int MAXN = 2e5;",
			"const int MAXUP = 21;",
			"struct LCA{",
			"    int f[MAXN+1][MAXUP];",
			"    int lvl[MAXN+1];",
			"    void build(int n, vi* g, int root){",
			"        lvl[root] = 0;",
			"        dfs(root, g, root);",
			"        for(int j=1;j<MAXUP;j++){",
			"            for(int i=1;i<=n;i++){",
			"                f[i][j] = f[f[i][j-1]][j-1];",
			"            }",
			"        }",
			"    }",
			"    void dfs(int v, vi* g, int p){",
			"        f[v][0] = p;",
			"        for(int u: g[v]){",
			"            if(u == p) continue;",
			"            lvl[u] = lvl[v] + 1;",
			"            dfs(u, g, v);",
			"        }",
			"    }",
			"    int lca(int u, int v){",
			"        if(lvl[u] < lvl[v]) swap(u, v);",
			"        for(int i=MAXUP-1;i>=0;i--){",
			"            if(lvl[u] - (1 << i) < lvl[v]) continue;",
			"            u = f[u][i];",
			"        }",
			"        if(u == v) return v;",
			"        for(int i=MAXUP-1;i>=0;i--){",
			"            if(f[u][i] == f[v][i]) continue;",
			"            u = f[u][i];",
			"            v = f[v][i];",
			"        }",
			"        return f[v][0];",
			"    }",
			"    int dis(int a, int b){",
			"        int c = lca(a, b);",
			"        return lvl[a] + lvl[b] - 2 * lvl[c];",
			"    }",
			"};"
		],
		"description": "Struct LCA para encontrar o menor ancestral comum em grafos."
	},
	"Sparse Table RMQ": {
		"prefix": "sparsetable",
		"body": [
			"template<class T>",
			"struct RMQ {",
			"    vector<vector<T>> jmp;",
			"    RMQ(const vector<T>& V) : jmp(1, V) {",
			"        for (int pw = 1, k = 1; pw * 2 <= V.size(); pw *= 2, ++k) {",
			"            jmp.emplace_back(V.size() - pw * 2 + 1);",
			"            for (int j = 0; j < jmp[k].size(); ++j)",
			"                jmp[k][j] = min(jmp[k - 1][j], jmp[k - 1][j + pw]);",
			"        }",
			"    }",
			"    T query(int a, int b) {",
			"        b++;",
			"        assert(a < b); // or return inf if a == b",
			"        int dep = 31 - __builtin_clz(b - a);",
			"        return min(jmp[dep][a], jmp[dep][b - (1 << dep)]);",
			"    }",
			"};"
		],
		"description": "Template for Sparse Table RMQ in C++"
	},
	"Treap Implementation": {
		"prefix": "treap",
		"body": [
			"mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
			"struct ndata {",
			"    // your data here",
			"    ndata() {}",
			"    // ndata(data){} <-- your default constructor",
			"};",
			"template<typename T> struct treap {",
			"    struct node {",
			"        int p, prop, cnt;",
			"        T val;",
			"        node *l, *r;",
			"        node(T val_) : p(rng()), prop(0), cnt(1), l(nullptr), r(nullptr) {",
			"            val = val_;",
			"        }",
			"    };",
			"    typedef node* pnode;",
			"    pnode root = nullptr;",
			"    int cnt(pnode t) { return t ? t->cnt : 0; }",
			"    void recalc(pnode t) {",
			"        if(!t) return;",
			"        push(t); push(t->l); push(t->r);",
			"        t->cnt = 1 + cnt(t->l) + cnt(t->r);",
			"        // some updates here",
			"    }",
			"    void push(pnode t) {",
			"        if(!t || !t->prop) return;",
			"        // update t here",
			"        t->prop = 0;",
			"        if(t->l) // propagate to l",
			"        if(t->r) // propagate to r",
			"    }",
			"    void split(pnode t, pnode &l, pnode &r, int pos) {",
			"        if (!t) return void(l = r = nullptr);",
			"        push(t);",
			"        if (cnt(t->l) < pos) split(t->r, t->r, r, pos - cnt(t->l) - 1), l = t;",
			"        else split(t->l, l, t->l, pos), r = t;",
			"        recalc(t);",
			"    }",
			"    void merge(pnode &t, pnode a, pnode b) {",
			"        push(a), push(b);",
			"        if (!a || !b) return void(t = a ? a : b);",
			"        if (a->p > b->p) merge(a->r, a->r, b), t = a;",
			"        else merge(b->l, a, b->l), t = b;",
			"        recalc(t);",
			"    }",
			"    void update(int l, int r) {",
			"        if (l >= r) return;",
			"        pnode a, b, c;",
			"        split(root, a, b, l);",
			"        split(b, b, c, r - l + 1);",
			"        // b stores the segment you want to update, change it!",
			"        merge(root, a, b);",
			"        merge(root, root, c);",
			"    }",
			"    void insert(int pos, T val) {",
			"        pnode a, b;",
			"        split(root, a, b, pos);",
			"        merge(a, a, new node(val));",
			"        merge(root, a, b);",
			"    }",
			"    void erase(pnode &t, int pos) {",
			"        if (cnt(t->l) == pos) {",
			"            pnode tmp = t;",
			"            merge(t, t->l, t->r);",
			"            delete tmp;",
			"        }",
			"        else if (cnt(t->l) < pos) erase(t->r, pos - cnt(t->l) - 1);",
			"        else erase(t->l, pos);",
			"        recalc(t);",
			"    }",
			"    void erase(int pos) { erase(root, pos); }",
			"    T get(int l, int r) {",
			"        pnode a, b, c;",
			"        split(root, a, b, l);",
			"        split(b, b, c, r - l + 1);",
			"        int ans = b->val;",
			"        merge(root, a, b);",
			"        merge(root, root, c);",
			"        return ans;",
			"    }",
			"    treap(vector<T> &a) {",
			"        for (int i = 0; i < (int)a.size(); i++) insert(i, a[i]);",
			"    }",
			"    void print(pnode t) {",
			"        if (!t) return;",
			"        push(t);",
			"        print(t->l);",
			"        cout << t->val << \" \";",
			"        print(t->r);",
			"    }",
			"    void print() { print(root); cout << endl; }",
			"};"
		],
		"description": "Template for a Treap implementation in C++"
	}	
}
